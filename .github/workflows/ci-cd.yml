name: CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Test Suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        rust-version: ['stable', 'beta']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Rust ${{ matrix.rust-version }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
          .venv/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-python-${{ hashFiles('**/requirements*.txt') }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run Rust tests
      working-directory: ./engine
      run: |
        cargo fmt -- --check
        cargo clippy -- -D warnings
        cargo test --verbose --all-features
        cargo bench --no-run
    
    - name: Build Rust extension
      working-directory: ./engine
      run: cargo build --release --features python-bindings
    
    - name: Install Python package
      run: pip install -e .
    
    - name: Run Python tests
      run: |
        python -m pytest tests/ -v --cov=purgeproof --cov-report=xml
        python -m pytest tests/unit/ -v
        python -m pytest tests/integration/ -v
        python -m pytest tests/compliance/ -v
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1
      with:
        path: purgeproof/
    
    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json
    
    - name: Rust Security Audit
      working-directory: ./engine
      run: |
        cargo install cargo-audit
        cargo audit
    
    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, rust
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Compliance Validation
  compliance:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: NIST SP 800-88 Compliance Check
      run: |
        python -m pytest tests/compliance/test_nist_compliance.py -v
    
    - name: DoD 5220.22-M Compliance Check
      run: |
        python -m pytest tests/compliance/test_dod_compliance.py -v
    
    - name: Common Criteria Compliance Check
      run: |
        python -m pytest tests/compliance/test_cc_compliance.py -v
    
    - name: Generate Compliance Report
      run: |
        python -c "
        from purgeproof.compliance import get_compliance_framework
        cf = get_compliance_framework()
        report = cf.generate_certification_report()
        print('Compliance validation completed')
        "

  # Performance Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Build optimized Rust engine
      working-directory: ./engine
      run: cargo build --release --features benchmarks
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/benchmarks/ -v --benchmark-only
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mkdocs mkdocs-material mkdocstrings
    
    - name: Build documentation
      run: |
        mkdocs build --strict
    
    - name: Deploy documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdocs gh-deploy --force

  # Build and Package
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools-rust
    
    - name: Build wheel
      run: python -m build --wheel
    
    - name: Build source distribution
      if: matrix.os == 'ubuntu-latest'
      run: python -m build --sdist
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}
        path: dist/

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: purgeproof/purgeproof
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release
  release:
    name: Release
    if: github.event_name == 'release'
    needs: [test, security, compliance, benchmark, build]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist-all
    
    - name: Merge artifacts
      run: |
        mkdir -p dist
        cp dist-all/dist-*/* dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/
        asset_name: purgeproof-release-assets
        asset_content_type: application/octet-stream

  # Deployment
  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/main'
    needs: [test, security, compliance]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests"
        # Add smoke test commands here
    
    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment"
        # Add production deployment commands here
    
    - name: Notify team
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#purgeproof-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}